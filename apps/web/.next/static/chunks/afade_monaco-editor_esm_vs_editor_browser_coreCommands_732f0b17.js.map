{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/jloka/Documents/repos/personal/shared-workshop/node_modules/.pnpm/monaco-editor%400.52.2/node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\nimport { EnterOperation } from '../common/cursor/cursorTypeEditOperations.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.metadata = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Right: 'right',\n        Down: 'down',\n        Left: 'left'\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor',\n        Column: 'column'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Right:\n                direction = 2 /* Direction.Right */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case EditorScroll_.RawDirection.Left:\n                direction = 4 /* Direction.Left */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            case EditorScroll_.RawUnit.Column:\n                unit = 6 /* Unit.Column */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.metadata = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = getActiveElement();\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand(activeElement);\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealAllCursors(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            if (result === null) {\n                // invalid arguments\n                return;\n            }\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n                return null;\n            }\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                metadata: CursorMove_.metadata\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealAllCursors(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealAllCursors(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealAllCursors(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        metadata: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        metadata: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealAllCursors(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                metadata: EditorScroll_.metadata\n            });\n        }\n        determineScrollMethod(args) {\n            const horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n            const verticalUnits = [\n                1 /* EditorScroll_.Unit.Line */,\n                2 /* EditorScroll_.Unit.WrappedLine */,\n                3 /* EditorScroll_.Unit.Page */,\n                4 /* EditorScroll_.Unit.HalfPage */,\n                5 /* EditorScroll_.Unit.Editor */,\n                6 /* EditorScroll_.Unit.Column */\n            ];\n            const horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n            const verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n            if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n                return this._runHorizontalEditorScroll.bind(this);\n            }\n            if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n                return this._runVerticalEditorScroll.bind(this);\n            }\n            return null;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            const runEditorScroll = this.determineScrollMethod(parsed);\n            if (!runEditorScroll) {\n                // Incompatible unit and direction\n                return;\n            }\n            runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runVerticalEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const futureViewport = viewModel.viewLayout.getFutureViewport();\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n        _runHorizontalEditorScroll(viewModel, source, args) {\n            const desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n            viewModel.viewLayout.setScrollPosition({ scrollLeft: desiredScrollLeft }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollLeft(viewModel, args) {\n            const deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n            return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLeft = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Left,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollRight = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Right,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealAllCursors(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealAllCursors(args.source, false, true);\n            }\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealAllCursors(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealAllCursors(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                metadata: RevealLine_.metadata\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand(activeElement) {\n            if (isFirefox) {\n                activeElement.focus();\n                activeElement.select();\n            }\n            activeElement.ownerDocument.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.selection) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, EnterOperation.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand(activeElement) {\n            activeElement.ownerDocument.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(92 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand(activeElement) {\n            activeElement.ownerDocument.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(92 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, metadata) {\n        super({\n            id: id,\n            precondition: undefined,\n            metadata\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, metadata) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, metadata));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}